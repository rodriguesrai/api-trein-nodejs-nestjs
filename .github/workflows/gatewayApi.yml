name: Deploy Gateway API

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
  
env:
  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
  DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
  DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
  API_PORT: ${{ secrets.API_PORT }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
  EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
  TOKEN_GH: ${{ secrets.TOKEN_GH }}
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  IMAGE_NAME: api-trein-nodejs-nestjs
  MONDODB_URI: ${{ secrets.MONGODB_URI }}
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm test

  build-push-image:
    name: Build and Push Image to GitHub Registry
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to GitHub Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Docker image
      run: docker build -t ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }} -f Dockerfile.prod .
      
    - name: List Docker images
      run: docker images
  
    - name: Publish image to GitHub Registry
      run: docker push ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest


  deploy-and-migrations:
    name: Deploy Application EC2
    runs-on: ubuntu-latest
    needs: build-push-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            sudo docker network inspect mynetwork >/dev/null 2>&1 || sudo docker network create mynetwork
            sudo docker container stop ${{ env.IMAGE_NAME }} || true
            sudo docker container rm ${{ env.IMAGE_NAME }} || true
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin
            echo "--- Pulling image from GitHub Registry ---"
            sudo docker pull ghcr.io/${{ github.actor }}/${{ env.IMAGE_NAME }}
            

            sudo docker container stop rabbitmq || true
            sudo docker container rm rabbitmq || true
            echo "--- Running image ---"
            sudo docker run -d \
              --restart=unless-stopped \
              -p 5672:5672 \
              -p 15672:15672 \
              --name rabbitmq \
              --network mynetwork \
              rabbitmq:3-management
            
            
            sudo docker run -d \
              --restart=unless-stopped \
              -p ${{ env.API_PORT }}:${{ env.API_PORT }} \
              --name ${{ env.IMAGE_NAME }} \
              -e API_PORT="${{ secrets.API_PORT }}" \
              -e CLIENT_ORIGIN="${{ secrets.CLIENT_ORIGIN }}" \
              -e EC2_HOST="${{ secrets.EC2_HOST }}" \
              -e DATABASE_HOST="${{ secrets.DATABASE_HOST }}" \
              -e DATABASE_PORT="${{ secrets.DATABASE_PORT }}" \
              -e DATABASE_USERNAME="${{ secrets.DATABASE_USERNAME }}" \
              -e DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}" \
              -e DATABASE_NAME="${{ secrets.DATABASE_NAME }}" \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              -e AWS_ACCESS_KEY="${{ secrets.AWS_ACCESS_KEY }}" \
              -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              -e AWS_REGION="${{ secrets.AWS_REGION }}" \
              -e RABBITMQ_URL="${{ secrets.RABBITMQ_URL }}" \
              -e MONGODB_URI="${{ secrets.MONGODB_URI }}" \
              -e EMAIL_SOURCE="${{ secrets.EMAIL_SOURCE }}" \
              -e S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}" \
              -e CATS_SERVICE_HOST="${{ secrets.CATS_SERVICE_HOST }}" \
              -e CATS_SERVICE_PORT="${{ secrets.CATS_SERVICE_PORT }}" \
              --network mynetwork \
              ghcr.io/${{ github.actor }}/${{ env.IMAGE_NAME }}


  migrations:
    name: Run Migrations
    runs-on: ubuntu-latest
    needs: deploy-and-migrations
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Connect to EC2 instance and run migrations
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            sudo docker exec ${{ env.IMAGE_NAME }} npm run prod:typeorm:migration
      
      
