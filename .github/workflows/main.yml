name: Node.js CI/CD Pipeline

on:
  push:
    branches:
      - main
      - TREIN-197/queuing-system
  

env:
  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
  DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
  DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
  API_PORT: ${{ secrets.API_PORT }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
  EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
  TOKEN_GH: ${{ secrets.TOKEN_GH }}
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  IMAGE_NAME: api-trein-nodejs-nestjs

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm test

  build-push-image:
    name: Build and Push Image to GitHub Registry
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to GitHub Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Docker image
      run: docker build -t ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }} -f Dockerfile.prod .
      
    - name: List Docker images
      run: docker images
  
    - name: Publish image to GitHub Registry
      run: docker push ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest


  # deploy-and-migrations:
  #   name: Deploy Application EC2 and Run Migrations
  #   runs-on: ubuntu-latest
  #   needs: build-push-image
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Deploy to EC2
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.EC2_HOST }}
  #         username: ${{ secrets.EC2_USERNAME }}
  #         key: ${{ secrets.EC2_PRIVATE_KEY }}
  #         script: |
  #           sudo docker container stop ${{ env.IMAGE_NAME }} || true
  #           sudo docker container rm ${{ env.IMAGE_NAME }} || true
  #           echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin
  #           echo "--- Pulling image from GitHub Registry ---"
  #           sudo docker pull ghcr.io/${{ github.actor }}/${{ env.IMAGE_NAME }}
  #           sudo docker run -d \
  #             --restart=unless-stopped \
  #             -p ${{ env.API_PORT }}:${{ env.API_PORT }} \
  #             --name ${{ env.IMAGE_NAME }} \
  #             -e API_PORT="${{ secrets.API_PORT }}" \
  #             -e EC2_HOST="${{ secrets.EC2_HOST }}" \
  #             -e DATABASE_HOST="${{ secrets.DATABASE_HOST }}" \
  #             -e DATABASE_PORT="${{ secrets.DATABASE_PORT }}" \
  #             -e DATABASE_USERNAME="${{ secrets.DATABASE_USERNAME }}" \
  #             -e DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}" \
  #             -e DATABASE_NAME="${{ secrets.DATABASE_NAME }}" \
  #             -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
  #             -e AWS_ACCESS_KEY="${{ secrets.AWS_ACCESS_KEY }}" \
  #             -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
  #             -e AWS_REGION="${{ secrets.AWS_REGION }}" \
  #             ghcr.io/${{ github.actor }}/${{ env.IMAGE_NAME }}


  deploy-and-migrations:
    name: Deploy Application EC2 and Run Migrations
    runs-on: ubuntu-latest
    needs: build-push-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate .env.prod file
        run: |
            echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" | sudo tee -a .env.prod
            echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" | sudo tee -a .env.prod
            echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" | sudo tee -a .env.prod
            echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" | sudo tee -a .env.prod
            echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" | sudo tee -a .env.prod
            echo "API_PORT=${{ secrets.API_PORT }}" | sudo tee -a .env.prod
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" | sudo tee -a .env.prod
            echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" | sudo tee -a .env.prod
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" | sudo tee -a .env.prod
            echo "AWS_REGION=${{ secrets.AWS_REGION }}" | sudo tee -a .env.prod        
    
      - name: Deploy to EC2
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          ARGS: "-rlgoDzvc -i"
          SOURCE: "docker-compose.prod.yml .env.prod"
          REMOTE_HOST: ${{ secrets.EC2_HOST }}
          REMOTE_USER: ${{ secrets.EC2_USERNAME }}
          TARGET: "/api-trein-nodejs-nestjs"
          SCRIPT_AFTER: |
            cd /api-trein-nodejs-nestjs
            docker stop $(docker ps -a -q)
            sudo docker-compose --env-file .env.prod -f docker-compose.prod.yml up -d