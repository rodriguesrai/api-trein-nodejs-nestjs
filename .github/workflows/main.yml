name: Node.js CI/CD Pipeline

on:
  push:
    branches:
      - TREIN-189/pipeline-github

env:
  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
  DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
  DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
  API_PORT: ${{ secrets.API_PORT }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm test

  # build:
  #   name: Build image
  #   runs-on: ubuntu-latest
  #   env:
  #     IMAGE_NAME: api-trein-nodejs-nestjs
  #   needs: test
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Build Docker image
  #       run: docker build -t ${{ env.IMAGE_NAME }} -f Dockerfile.prod .
      
  #     - name: List Docker images
  #       run: docker images


  build-push-image:
    name: Build and Push Image to GitHub Registry
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: api-trein-nodejs-nestjs
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to GitHub Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Docker image
      run: docker build -t ${{ env.IMAGE_NAME }} -f Dockerfile.prod .
      
    - name: List Docker images
      run: docker images
  
    - name: Publish image to GitHub Registry
      run: docker push ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest



  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: build-push-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy using Docker Compose
        run: docker-compose -f docker-compose.prod.yml up -d --build     

  # migrate-database:
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '16'

  #     - name: Install TypeORM and ts-node
  #       run: |
  #         npm install typeorm ts-node -g

  #     - name: Run Database Migrations
  #       run: npm run prod:typeorm:migration 
