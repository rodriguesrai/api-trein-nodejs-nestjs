name: Node.js CI/CD Pipeline

on:
  push:
    branches:
      - main
      - TREIN-191/aws-deploy
  pull_request:
    branches:
      - main


env:
  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
  DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
  DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
  API_PORT: ${{ secrets.API_PORT }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
  EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm test

  build-push-image:
    name: Build and Push Image to GitHub Registry
    runs-on: ubuntu-latest
    needs: test
    env:
      IMAGE_NAME: api-trein-nodejs-nestjs
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to GitHub Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Docker image
      run: docker build -t ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }} -f Dockerfile.prod .
      
    - name: List Docker images
      run: docker images
  
    - name: Publish image to GitHub Registry
      run: docker push ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest



  # deploy-and-migration:
  #   name: Deploy Application and Run Migrations
  #   runs-on: ubuntu-latest
  #   needs: build-push-image
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '16'

  #     - name: Deploy using Docker Compose
  #       run: docker-compose -f docker-compose.prod.yml up -d --build
      
  #     - name: Run Database Migrations
  #       run: docker exec api-trein-nodejs-nestjs_api-trein_1 npm run typeorm migration:run -- -d ./dist/src/typeOrm.config.js

  deploy-and-migrations:
    name: Deploy Application EC2 and Run Migrations
    runs-on: ubuntu-latest
    needs: build-push-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            whoami
            cd /home/ubuntu/api-trein-nodejs-nestjs
            sudo echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env
            sudo echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env
            sudo echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> .env
            sudo echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
            sudo echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
            sudo echo "API_PORT=${{ secrets.API_PORT }}" >> .env
            sudo echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            docker-compose down
            docker-compose --env-file .env -f docker-compose.prod.yml up -d --build
            docker exec api-trein-nodejs-nestjs-api-trein-1 npm run typeorm migration:run -- -d ./dist/src/typeOrm.config.js

#  docker exec api-trein-nodejs-nestjs-api-trein-1 npm run typeorm migration:run -- -d ./dist/src/typeOrm.config.js