name: Node.js CI/CD Pipeline

on:
  push:
    branches:
      - TREIN-189/pipeline-github

env:
  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
  DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
  DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
  API_PORT: ${{ secrets.API_PORT }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm test

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t api-trein-nodejs-nestjs -f Dockerfile.prod .
      # - name: Push Docker image to registry
      #   run: docker push your-registry/api-trein-nodejs-nestjs

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Deploy using Docker Compose
        run: docker-compose -f docker-compose.prod.yml up -d --build      

  # migration:
  #   name: Run Database Migrations
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v2

  #     - name: Run Database Migrations
  #       run: |
  #         # Aqui você colocaria os comandos para executar as migrações do banco de dados
  #         # Exemplo: npm run typeorm migration:run

